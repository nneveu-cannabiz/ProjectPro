create table public."PMA_Projects" (
  id uuid not null,
  name text not null,
  description text null,
  category text not null,
  status text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  project_type text null default 'Active'::text,
  priority text not null default 'Medium'::text,
  flow_chart text null,
  start_date date null,
  end_date date null,
  assignee_id uuid null,
  deadline date null,
  tags jsonb null,
  progress smallint null,
  multi_assignee_id jsonb null,
  documents jsonb[] null,
  sprint_plan_column text null,
  ranking jsonb null,
  constraint PMA_Projects_pkey primary key (id),
  constraint pma_projects_assignee_id_fkey foreign KEY (assignee_id) references "PMA_Users" (id) on delete set null,
  constraint PMA_Projects_priority_check check (
    (
      priority = any (
        array[
          'Critical'::text,
          'High'::text,
          'Medium'::text,
          'Low'::text
        ]
      )
    )
  ),
  constraint PMA_Projects_project_type_check check (
    (
      project_type = any (
        array[
          'Active'::text,
          'Upcoming'::text,
          'Future'::text,
          'On Hold'::text
        ]
      )
    )
  ),
  constraint PMA_Projects_status_check check (
    (
      status = any (
        array['todo'::text, 'in-progress'::text, 'done'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pma_projects_assignee_id on public."PMA_Projects" using btree (assignee_id) TABLESPACE pg_default;

create trigger projects_field_changes_trigger
after INSERT
or
update on "PMA_Projects" for EACH row
execute FUNCTION create_field_change_updates ();
create table public."PMA_Updates" (
  id uuid not null,
  message text not null,
  user_id text not null,
  entity_type text not null,
  entity_id uuid not null,
  created_at timestamp with time zone not null default now(),
  "memberId" text null,
  "customerListId" text null,
  is_read_by jsonb null,
  comment_to text null,
  tagged_user_id jsonb null,
  is_request jsonb null,
  constraint PMA_Updates_pkey primary key (id),
  constraint PMA_Updates_customerListId_fkey foreign KEY ("customerListId") references "CustomerList_duplicate" (id),
  constraint PMA_Updates_memberId_fkey foreign KEY ("memberId") references "Member" ("memberId")
) TABLESPACE pg_default;

create index IF not exists idx_updates_entity on public."PMA_Updates" using btree (entity_type, entity_id) TABLESPACE pg_default;

-- Additional indexes for new PMA_Updates columns
create index IF not exists idx_updates_is_read_by on public."PMA_Updates" using gin (is_read_by) TABLESPACE pg_default;
create index IF not exists idx_updates_tagged_user_id on public."PMA_Updates" using gin (tagged_user_id) TABLESPACE pg_default;
create index IF not exists idx_updates_comment_to on public."PMA_Updates" using btree (comment_to) TABLESPACE pg_default;
create index IF not exists idx_updates_is_request on public."PMA_Updates" using gin (is_request) TABLESPACE pg_default;
----------------------------------------------------------


create table public."PMA_Tasks" (
  id uuid not null,
  project_id uuid not null,
  name text not null,
  description text null,
  task_type text not null,
  status text not null,
  assignee_id text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  start_date date null,
  end_date date null,
  deadline date null,
  tags jsonb null,
  progress smallint null,
  flow_chart text null,
  priority text null,
  sprint_plan_group_id text null,
  ranking jsonb null,
  constraint PMA_Tasks_pkey primary key (id),
  constraint PMA_Tasks_project_id_fkey foreign KEY (project_id) references "PMA_Projects" (id) on delete CASCADE,
  constraint PMA_Tasks_status_check check (
    (
      status = any (
        array['todo'::text, 'in-progress'::text, 'done'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_tasks_project_id on public."PMA_Tasks" using btree (project_id) TABLESPACE pg_default;

create trigger tasks_field_changes_trigger
after INSERT
or
update on "PMA_Tasks" for EACH row
execute FUNCTION create_field_change_updates ();
--------------------------------------------------

create table public."PMA_SubTasks" (
  id uuid not null,
  task_id uuid not null,
  name text not null,
  description text null,
  task_type text not null,
  status text not null,
  assignee_id text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  start_date date null,
  end_date date null,
  deadline date null,
  tags jsonb null,
  progress smallint null,
  constraint PMA_SubTasks_pkey primary key (id),
  constraint PMA_SubTasks_task_id_fkey foreign KEY (task_id) references "PMA_Tasks" (id) on delete CASCADE,
  constraint PMA_SubTasks_status_check check (
    (
      status = any (
        array['todo'::text, 'in-progress'::text, 'done'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_subtasks_task_id on public."PMA_SubTasks" using btree (task_id) TABLESPACE pg_default;

--------------------------------------------------




create table public."PMA_Users" (
  id uuid not null,
  first_name text null,
  last_name text null,
  email text not null,
  profile_color text not null default '#2563eb'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  role_id uuid null,
  manager_id uuid null,
  department text null,
  constraint PMA_Users_pkey primary key (id),
  constraint PMA_Users_id_fkey foreign KEY (id) references auth.users (id),
  constraint PMA_Users_manager_id_fkey foreign KEY (manager_id) references "PMA_Users" (id) on delete set null,
  constraint PMA_Users_role_id_fkey foreign KEY (role_id) references "PMA_Roles" (id) on delete set null
) TABLESPACE pg_default;

create index IF not exists idx_pma_users_role_id on public."PMA_Users" using btree (role_id) TABLESPACE pg_default;

create index IF not exists idx_pma_users_manager_id on public."PMA_Users" using btree (manager_id) TABLESPACE pg_default;


create table public."PMA_Hours" (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  task_id uuid not null,
  hours numeric(5, 2) not null,
  date date not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  is_planning_hours boolean null,
  constraint PMA_Hours_pkey primary key (id),
  constraint PMA_Hours_task_id_fkey foreign KEY (task_id) references "PMA_Tasks" (id) on delete CASCADE,
  constraint PMA_Hours_user_id_fkey foreign KEY (user_id) references "PMA_Users" (id) on delete CASCADE,
  constraint PMA_Hours_hours_check check ((hours > (0)::numeric))
) TABLESPACE pg_default;

create index IF not exists idx_hours_user_id on public."PMA_Hours" using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_hours_task_id on public."PMA_Hours" using btree (task_id) TABLESPACE pg_default;

create index IF not exists idx_hours_date on public."PMA_Hours" using btree (date) TABLESPACE pg_default;

create table public."PMA_Roles" (
  id uuid not null default gen_random_uuid (),
  name text not null,
  description text null,
  permissions jsonb null default '{}'::jsonb,
  is_system_role boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint PMA_Roles_pkey primary key (id),
  constraint PMA_Roles_name_key unique (name)
) TABLESPACE pg_default;

create index IF not exists idx_pma_roles_name on public."PMA_Roles" using btree (name) TABLESPACE pg_default;

create table public."PMA_Requests" (
  id uuid not null default gen_random_uuid (),
  title character varying(255) not null,
  description text not null,
  request_type character varying(50) not null,
  priority character varying(20) null default 'medium'::character varying,
  submitter_name character varying(255) not null,
  submitter_email character varying(255) not null,
  submitter_department character varying(100) null,
  status character varying(30) null default 'submitted'::character varying,
  assigned_to uuid null,
  reviewed_by uuid null,
  expected_completion_date date null,
  actual_completion_date date null,
  internal_notes text null,
  response_notes text null,
  related_project_id uuid null,
  external_reference character varying(255) null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  reviewed_at timestamp with time zone null,
  completed_at timestamp with time zone null,
  submission_request_info jsonb null,
  constraint pma_requests_pkey primary key (id),
  constraint pma_requests_assigned_to_fkey foreign KEY (assigned_to) references auth.users (id) on delete set null,
  constraint pma_requests_reviewed_by_fkey foreign KEY (reviewed_by) references auth.users (id) on delete set null,
  constraint pma_requests_priority_check check (
    (
      (priority)::text = any (
        (
          array[
            'low'::character varying,
            'medium'::character varying,
            'high'::character varying,
            'urgent'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint pma_requests_request_type_check check (
    (
      (request_type)::text = any (
        (
          array[
            'bug'::character varying,
            'task'::character varying,
            'project'::character varying,
            'question'::character varying,
            'support'::character varying,
            'feature_request'::character varying,
            'other'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint pma_requests_status_check check (
    (
      (status)::text = any (
        (
          array[
            'submitted'::character varying,
            'in_review'::character varying,
            'in_progress'::character varying,
            'completed'::character varying,
            'rejected'::character varying,
            'on_hold'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pma_requests_status on public."PMA_Requests" using btree (status) TABLESPACE pg_default;

create index IF not exists idx_pma_requests_type on public."PMA_Requests" using btree (request_type) TABLESPACE pg_default;

create index IF not exists idx_pma_requests_priority on public."PMA_Requests" using btree (priority) TABLESPACE pg_default;

create index IF not exists idx_pma_requests_submitter_email on public."PMA_Requests" using btree (submitter_email) TABLESPACE pg_default;

create index IF not exists idx_pma_requests_assigned_to on public."PMA_Requests" using btree (assigned_to) TABLESPACE pg_default;

create index IF not exists idx_pma_requests_created_at on public."PMA_Requests" using btree (created_at) TABLESPACE pg_default;

create trigger trigger_update_pma_requests_updated_at BEFORE
update on "PMA_Requests" for EACH row
execute FUNCTION update_pma_requests_updated_at ();



create table public."PMA_Sprints" (
  id uuid not null default gen_random_uuid (),
  project_id uuid not null,
  selected_task_ids jsonb not null default '[]'::jsonb,
  sprint_type text not null,
  status text not null default 'active'::text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  created_by uuid not null,
  name text null,
  description text null,
  start_date date null,
  end_date date null,
  ranking jsonb null default '{}'::jsonb,
  sprint_id text null,
  constraint PMA_Sprints_pkey primary key (id),
  constraint PMA_Sprints_created_by_fkey foreign KEY (created_by) references "PMA_Users" (id) on delete set null,
  constraint PMA_Sprints_project_id_fkey foreign KEY (project_id) references "PMA_Projects" (id) on delete CASCADE,
  constraint PMA_Sprints_sprint_type_check check (
    (
      sprint_type = any (array['Sprint 1'::text, 'Sprint 2'::text])
    )
  ),
  constraint PMA_Sprints_status_check check (
    (
      status = any (
        array[
          'active'::text,
          'completed'::text,
          'cancelled'::text,
          'on-hold'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_pma_sprints_project_id on public."PMA_Sprints" using btree (project_id) TABLESPACE pg_default;

create index IF not exists idx_pma_sprints_sprint_type on public."PMA_Sprints" using btree (sprint_type) TABLESPACE pg_default;

create index IF not exists idx_pma_sprints_status on public."PMA_Sprints" using btree (status) TABLESPACE pg_default;

create index IF not exists idx_pma_sprints_created_by on public."PMA_Sprints" using btree (created_by) TABLESPACE pg_default;

create index IF not exists idx_pma_sprints_ranking on public."PMA_Sprints" using gin (ranking) TABLESPACE pg_default;